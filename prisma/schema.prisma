// prisma/schema.prisma
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum Role {
    customer
    owner
    admin
}

enum BikeType {
    city
    mountain
    electric
}

enum BookingStatus {
    pending
    active
    completed
    cancelled
    failed
}

enum RideJourneyStatus {
    active
    completed
}

enum Rating {
    one   @map("1")
    two   @map("2")
    three @map("3")
    four  @map("4")
    five  @map("5")
}

model User {
    id                                 Int       @id @default(autoincrement())
    fullName                           String    @db.VarChar(255)
    username                           String    @unique @db.VarChar(255)
    email                              String    @unique @db.VarChar(255)
    password                           String    @db.VarChar(255)
    contact                            String    @db.VarChar(255)
    profilePictureUrl                  String?   @db.VarChar(500)
    role                               Role      @default(customer)
    isVerified                         Boolean   @default(false)
    verifyCode                         String?   @db.VarChar(255)
    verifyCodeExpiryDate               DateTime?
    verifyEmailResetPassword           String?   @db.VarChar(255)
    verifyEmailResetPasswordExpiryDate DateTime?
    createdAt                          DateTime  @default(now())
    updatedAt                          DateTime  @updatedAt

    // Relationships
    messages      Message[]
    bikes         Bike[]
    bookings      Booking[]
    reviews       Review[]
    notifications Notification[]
    // invoices      Invoice[]

    rideJourney  RideJourney[]
    damageReport DamageReport[]
}

model Message {
    id        Int      @id @default(autoincrement())
    content   String   @db.Text
    createdAt DateTime @default(now())

    userId Int?
    // Optional relation to associate message with a user
    user   User? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Bike {
    id              Int      @id @default(autoincrement())
    bikeName        String   @db.VarChar(255)
    bikeType        BikeType @default(city)
    bikeDescription String   @db.Text
    bikeLocation    String   @db.VarChar(255)
    pricePerDay     Decimal  @db.Decimal(10, 2)
    bikeImageUrl    String?  @db.VarChar(500)
    available       Boolean  @default(true)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    ownerId         Int

    // Relationships
    owner        User           @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    bookings     Booking[]      @relation(name: "BookingToBike")
    reviews      Review[]       @relation(name: "ReviewToBike")
    // invoices Invoice[] @relation(name: "InvoiceToBike")
    rideJourney  RideJourney[]
    damageReport DamageReport[]

    @@index([bikeType])
    @@index([available])
}

model Booking {
    id               Int           @id @default(autoincrement())
    startTime        DateTime
    endTime          DateTime
    totalPrice       Float
    status           BookingStatus @default(pending)
    paymentReference String?
    createdAt        DateTime      @default(now())
    updatedAt        DateTime      @updatedAt
    customerId       Int?
    bikeId           Int?
    ownerId          Int?

    // Relationships
    customer     User?          @relation(fields: [customerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    bike         Bike?          @relation(fields: [bikeId], references: [id], onDelete: SetNull, onUpdate: Cascade, name: "BookingToBike")
    payment      Payment[]
    // Invoice  Invoice[]
    rideJourney  RideJourney[]
    damageReport DamageReport[]

    @@index([status])
    @@index([startTime, endTime])
}

model RideJourney {
    id         Int               @id @default(autoincrement())
    startTime  DateTime?
    endTime    DateTime?
    status     RideJourneyStatus @default(active)
    createdAt  DateTime          @default(now())
    updatedAt  DateTime          @updatedAt
    bookingId  Int
    customerId Int
    bikeId     Int

    booking  Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    customer User    @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    bike     Bike    @relation(fields: [bikeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    trackingPaths  TrackingPaths[]  @relation("JourneyPaths")
    trackingPoints TrackingPoints[] @relation("JourneyPoints")
    Review         Review[]

    @@index([status])
    @@index([startTime, endTime])
}

model TrackingPaths {
    id            Int      @id @default(autoincrement())
    rideJourneyId Int
    pathJson      Json
    recordedAt    DateTime @default(now())

    rideJourney RideJourney @relation("JourneyPaths", fields: [rideJourneyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([rideJourneyId])
}

model TrackingPoints {
    id            BigInt @id @default(autoincrement())
    rideJourneyId Int
    lat           Float
    lng           Float
    timestamp     BigInt

    rideJourney RideJourney @relation("JourneyPoints", fields: [rideJourneyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([rideJourneyId])
}

model Review {
    id                        Int      @id @default(autoincrement())
    rating                    Rating
    comment                   String   @db.Text
    customerId                Int?
    customerName              String
    customerProfilePictureUrl String?  @db.VarChar(500)
    bikeId                    Int
    createdAt                 DateTime @default(now())
    updatedAt                 DateTime @updatedAt
    rideJourneyId             Int?
    reviewBikeImageUrl        String?  @db.VarChar(500)

    // Relationships
    customer    User?        @relation(fields: [customerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    bike        Bike         @relation(fields: [bikeId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "ReviewToBike")
    rideJourney RideJourney? @relation(fields: [rideJourneyId], references: [id], onDelete: SetNull, onUpdate: Cascade)

    @@index([rating])
}

model Notification {
    id        Int      @id @default(autoincrement())
    title     String   @db.VarChar(255)
    message   String   @db.Text
    type      String   @db.VarChar(255)
    isRead    Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    Int

    // Relationship: Each notification belongs to a user
    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Payment {
    id            Int           @id @default(autoincrement())
    transactionId String        @unique @db.VarChar(255) // Token or transaction id from payment gateway
    amount        Float
    method        String        @db.VarChar(255) // e.g., "Khalti"
    status        PaymentStatus @default(pending) // e.g., "Success", "Pending", "Failed"
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    bookingId     Int

    booking Booking @relation(fields: [bookingId], references: [id])
}

enum PaymentStatus {
    success
    pending
    failed
}

model Invoice {
    id              Int      @id @default(autoincrement())
    customerName    String
    customerContact String
    ownerName       String
    ownerContact    String
    bikeName        String
    bikeType        String
    startTime       DateTime
    endTime         DateTime
    pricePerDay     Decimal  @db.Decimal(10, 2)
    totalPrice      Float
    paymentMethod   String   @db.VarChar(255)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    customerId      Int
    bikeId          Int
    transactionId   String   @unique
    bookingId       Int?

    // customer User? @relation(fields: [customerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    // bike     Bike? @relation(fields: [bikeId], references: [id], onDelete: SetNull, onUpdate: Cascade, name: "InvoiceToBike")
    // Booking   Booking? @relation(fields: [bookingId], references: [id])
    // bookingId Int?

    @@index([startTime, endTime])
}

model DamageReport {
    id                        Int                @id @default(autoincrement())
    bikeId                    Int?
    customerId                Int?
    customerName              String?
    customerProfilePictureUrl String?            @db.VarChar(500)
    description               String
    status                    DamageReportStatus @default(pending) // pending, reviewed, resolved
    createdAt                 DateTime           @default(now())
    updatedAt                 DateTime           @updatedAt
    ownerId                   Int?
    bookingId                 Int?

    customer User?                @relation(fields: [customerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    bike     Bike?                @relation(fields: [bikeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    booking  Booking?             @relation(fields: [bookingId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    images   DamageReportImages[]
}

model DamageReportImages {
    id             Int      @id @default(autoincrement())
    damageReportId Int
    imageUrl       String   @db.VarChar(500) // Cloudinary URLs
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    damageReport DamageReport @relation(fields: [damageReportId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum DamageReportStatus {
    pending
    reviewed
    resolved
}
