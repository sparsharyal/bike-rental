// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  password    String
  role        Role      @default(CUSTOMER)
  isApproved  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bikes         Bike[]    @relation("BikeOwner")
  rentals       Rental[]  @relation("RentalRenter")

  @@map("users")
}

model Bike {
  id            String    @id @default(cuid())
  model         String
  brand         String
  type          String
  year          Int
  description   String    @db.Text
  daily_rate    Float
  is_available  Boolean   @default(true)
  image_url     String?
  owner_id      String
  owner         User      @relation("BikeOwner", fields: [owner_id], references: [id])
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  rentals       Rental[]
}

model Rental {
  id            String    @id @default(cuid())
  start_date    DateTime
  end_date      DateTime
  status        String    @default("PENDING")
  total_amount  Float
  bike_id       String
  bike          Bike      @relation(fields: [bike_id], references: [id])
  renter_id     String
  renter        User      @relation("RentalRenter", fields: [renter_id], references: [id])
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  payments      Payment[]
}

model Payment {
  id            String    @id @default(cuid())
  amount        Float
  status        String    @default("PENDING")
  rental_id     String
  rental        Rental    @relation(fields: [rental_id], references: [id])
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  refunds       Refund[]
}

model Refund {
  id            String    @id @default(cuid())
  amount        Float
  status        String    @default("PENDING")
  reason        String?
  payment_id    String
  payment       Payment   @relation(fields: [payment_id], references: [id])
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
}

enum Role {
  CUSTOMER
  OWNER
  ADMIN
}
